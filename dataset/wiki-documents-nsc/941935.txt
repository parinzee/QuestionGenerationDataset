<doc id="941935" url="https://th.wikipedia.org/wiki?curid=941935" title="ขั้นตอนวิธีของพริม">ขั้นตอนวิธีของพริม ขั้นตอนวิธีของพริม ()Prim's Algorithm ถูกพัฒนาโดยนักคณิตศาสตร์ชื่อ Vojtech Jarnik ในปี1930 ต่อมาถูก พัฒนาต่อโดยนักคอมพิวเตอร์ชื่อ Robert C. Prim ในปี1957 และ Edsger Dijkstra ในปี1959 ดังนั้น อัลกอริทึมนี้บางทีจึงมักเรียกว่า DJP Algorithm , Jarnik Algorithm หรือ Prim-Jarnik Algorithm ซึ่งเป็นอัลกอริทึมที่ใช้ในการหาขนาด หรือน้ำหนักของต้นไม้ทอดข้ามที่น้อยที่สุด เราจะเริ่มจากการทำ minimum spanning tree เล็ก ๆในกราฟก่อน จากนั้นจะค่อยๆเลือก edge ที่ ไม่ต่อกับ minimum spanning tree ย่อย ๆเดิมมาต่อเพิ่มไปเรื่อย ๆ จนได้ครบทุก node ซึ่ง algorithm ตัวนี้ จะ implement คล้ายๆกับ Dijkstra's Algorithmcodeขั้นตอนวิธีของพริม codeขั้นตอนวิธีของพริม. import heapq def prim(nodes,edges):testcase ขั้นตอนวิธีของพริม testcase ขั้นตอนวิธีของพริม. import heapq from prim import prim1. scenario1:กราฟทั่วไป 2. Given:มีเส้นเชื่อมดังที่กำหนด 3. When:หาระยะที่สั้นที่สุดที่เชื่อมทุกnode 4. Then:ได้ผลลัพธ์คือ[('A', 'D', 5),('D', 'F', 6),('A', 'B', 7),('B', 'E', 7),('E', 'C', 5),('E', 'G', 9)] def test_case1():1. scenario2:กราฟทั่วไปแต่มีขนาดที่เล็กลง 2. Given:มีเส้นเชื่อมดังที่กำหนด 3. When:หาระยะที่สั้นที่สุดที่เชื่อมทุกnode 4. Then:ได้ผลลัพธ์คือ[ (&quot;A&quot;, &quot;C&quot;, 3),(&quot;A&quot;, &quot;B&quot;, 4),(&quot;B&quot;, &quot;D&quot;, 2)] def test_case2():1. scenario3:ไม่มีกราฟ 2. Given:มีเส้นเชื่อมดังที่กำหนด 3. When:หาระยะที่สั้นที่สุดที่เชื่อมทุกnode 4. Then:ได้ผลลัพธ์คือNone def test_case3():1. scenario4:มีค่าซ้ำกัน 2. Given:มีเส้นเชื่อมดังที่กำหนด 3. When:หาระยะที่สั้นที่สุดที่เชื่อมทุกnode 4. Then:ได้ผลลัพธ์คือ[ (&quot;A&quot;, &quot;B&quot;, 2),(&quot;A&quot;, &quot;E&quot;,2 ),(&quot;A&quot;, &quot;C&quot;, 3),(&quot;B&quot;, &quot;D&quot;, 4)] def test_case4():Big-o Big-o. Big-o Prim’s algorithm</doc>
