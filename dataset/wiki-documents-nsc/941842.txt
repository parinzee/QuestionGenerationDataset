<doc id="941842" url="https://th.wikipedia.org/wiki?curid=941842" title="รายการประชิด">รายการประชิด รายการประชิด(อังกฤษ : Adjacency List) เป็นวิธีการของโครงสร้างแบบรายการของทฤษฎีกราฟ ซึ่งเป็นการใช้ลิสต์ในการเก็บข้อมูลของกราฟซึ่งเป็นโครงสร้างข้อมูลโดยวิธีการนี้จะใช้สำหรับการแก้ปัญหาของทฤษฎีกราฟลักษณะการทำงานหลักการทำงาน ลักษณะการทำงาน. หลักการทำงาน. การทำงานของ Adjacency List สามารถแบ่งลักษณะการเก็บข้อมูลได้ 2 แบบตามการจำแนกชนิดของกราฟ คือ กราฟแบบมีทิศทาง (directed graph) และ กราฟแบบไม่มีทิศทาง (undirected graph) โดยสามารถใช้อัลกอริทึม การค้นหาแบบจำกัดความลึก(อังกฤษ : Depth-first Traversal) และ การค้นหาในแนวกว้าง(อังกฤษ : Breath-first Traversal) เพื่อค้นหาจุดที่เชื่อมต่อกันของกราฟ ขั้นตอนการทำงานของรายการประชิด(Adjacency List)- กำหนดให้ Vertex หมายถึง โหนด - กำหนดให้ Edge หมายถึง เส้นเชื่อมของโหนด - เพิ่มข้อมูล Vertex และ Edge เข้ามาในโปรแกรม - ทำการวน Vertex และ Edge เพื่อสร้างทรัยขึ้นมา โดยใช้หลักการของลิงลิสต์ - เช็ค Vertex แต่ละตัวว่า Edge เชื่อมต่อกันหรือไม่ตัวอย่างของกราฟไม่มีทิศทางและมีทิศทาง ตัวอย่างของกราฟไม่มีทิศทางและมีทิศทาง. กราฟไม่มีทิศทาง (Undirected graph) กราฟแบบมีทิศทาง (Directed graph)ขั้นตอนวิธี(Code)ขั้นตอนโค้ด ขั้นตอนวิธี(Code). ขั้นตอนโค้ด. class Vertex(โหนด): def รับข้อมูล(n) กำหนดชื่อของ Vertex จากข้อมูลที่ได้รับ n กำหนดลิสต์ของ Vertex def เพิ่ม Vertex จากข้อมูล(v) if ไม่มี Vertex ในลิสต์ของ Vertex เพิ่ม Vertex จากฟังก์ชันรับข้อมูล เข้าไปในลิสต์ จัดเรียง Vertex ที่อยู่ในลิสต์ class Graph(กราฟ): กำหนดลิสต์ของ Vertex ใหม่ def เพิ่ม Vertex(v) if Vertex มาจากคลาส Vertex และ Vertex ที่มาจากคลาส Vertex ไม่อยู่ในลิสต์ของ Vertex ใหม่ กำหนด Vertex ตัวแรก รีเทิร์น True else: รีเทิร์น False def เพิ่ม Edge(u,v) if u อยู่ใน Vertex ใหม่ และ v อยู่ใน Vertex ใหม่ Vertex ใหม่ u = ฟังก์ชันเพิ่ม Vertex จากข้อมูล v Vertex ใหม่ v = ฟังก์ชันเพิ่ม Vertex จากข้อมูล u รีเทิร์น True else: รีเทิร์น False def รีเทิร์นผลลัพธ์ กำหนดลิสต์ของผลลัพธ์ for key in ลิสต์ของ Vertex ใหม่ที่ key เพิ่มเข้าไปในลิสต์ของผลลัพธ์ รีเทิร์น ลิสต์ของผลลัพธ์ตัวอย่างโค้ด(Code) ตัวอย่างโค้ด(Code). เขียนโดย ภาษาไพทอน(Python) class Vertex: class Graph:ตัวอย่างเทสเคส(Test case) ตัวอย่างเทสเคส(Test case). เขียนโดย ภาษาไพทอน(Python) Scinario1: Graph have 5 vertex is A, B, C, D and E Given list of vertex edge is ["AB","BC","CD",DE","EA"] When convert vertex list to list of result Then return list of result from AdjencencyList import* def test_adjencency_list_1():ความเร็วในการทำงานBig O ความเร็วในการทำงาน. Big O. จากตัวอย่างโค้ดด้านบน Big(O) ของคลาส Vertex คือ O(n) + O(n) = O(2n) = O(n) = O(1)และ Big(O) ของคลาส Graph คือ O(n) + O(n) + O(n) = O(3n) = O(n)Best case Best case. คือ คลาส Vertex เนื่องจากต้องมีการทำงานทุกครั้งที่ใส่ข้อมูลเข้าไป จึงมีความเร็วในการทำงานเป็น O(1)Worst case Worst case. คือ คลาส Graph เนื่องจากต้องมีการทำงานทุกครั้งที่รับข้อมูลจากคลาส Vertex จึงมีความเร็วในการทำงานเป็น O(n)</doc>
