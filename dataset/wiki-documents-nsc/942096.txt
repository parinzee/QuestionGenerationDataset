<doc id="942096" url="https://th.wikipedia.org/wiki?curid=942096" title="ต้นไม้บีเค">ต้นไม้บีเค ต้นไม้บีเค ( หรือ ) เป็นโครงสร้างข้อมูลแบบต้นไม้ซึ่งออกแบบมาเพื่อค้นหาสตริงที่ใกล้เคียงกับสตริง ใช้ในการตรวจสอบตัวสะกดตามระยะห่าง ระหว่างคำสองคำซึ่งโดยทั่วไปแล้วจะมีจำนวนการเปลี่ยนแปลงที่ต้องทำเพื่อเป็นการเปลี่ยนเป็นคำอื่น ต้นไม้ BK เป็นต้นไม้เมตริกที่แนะนำโดย Walter Austin Burkhard และ Robert M. Keller ที่ปรับให้เหมาะกับพื้นที่เมตริกแบบไม่ต่อเนื่อง สำหรับความเรียบง่ายให้เราพิจารณาเมตริกแบบไม่ต่อเนื่อง จำนวนเต็ม {\ displaystyle d (x, y)} d (x, y) จากนั้น ต้นไม้บีเคมีการกำหนดในลักษณะดังต่อไปนี้ มีการเลือกองค์ประกอบตามอำเภอใจ a เป็นโหนดราก โหนดรากอาจมี subtrees เป็นศูนย์หรือมากกว่า ทรีย่อย k-th สร้างขึ้นใหม่จากทุกองค์ประกอบ b เช่น {\ displaystyle d (a, b) = k} d (a, b) = k ต้นไม้บีเคสามารถใช้สำหรับการจับคู่สายโดยประมาณในพจนานุกรม ตัวอย่างเช่น ใช้เป็นตัวตรวจสอบการสะกดหรือเมื่อค้นหาคำค้นหาแบบ "คลุมเครือ" จุดมุ่งหมายคือการกลับมาเช่น "seek" และ "peek" ถ้าฉันค้นหา "aeek" สิ่งที่ทำให้เป็นต้นไม้บีเค ก็คือพวกเขาใช้ปัญหาที่ไม่มีทางออกที่ชัดเจนนอกเหนือจากการค้นหาแบบ > และนำเสนอวิธีการที่เรียบง่ายและสง่างามเพื่อเร่งการค้นหาอย่างมากความเป็นมาของต้นไม้บีเค ความเป็นมาของต้นไม้บีเค. ต้นไม้บีเค ได้รับการเสนอโดย Burkhard and Keller เป็นครั้งแรกในปีพ. ศ. 2516 ในบทความ "แนวทางบางอย่างที่ตรงกับการค้นหาไฟล์" สำเนาเท่านั้นของออนไลน์นี้ดูเหมือนจะอยู่ในที่เก็บถาวรของ ACM ซึ่งเป็นการสมัครรับข้อมูลเท่านั้น รายละเอียดเพิ่มเติมได้จากบทความเรื่อง "Fast String Matching ในพจนานุกรม" ก่อนที่เราจะสามารถกำหนดต้นไม้บีเค เราจำเป็นต้องกำหนดคู่ของการลงทะเบียนล่วงหน้า ในการทำดัชนีและค้นหาพจนานุกรมของเราเราจำเป็นต้องมีวิธีเปรียบเทียบสตริง วิธีการบัญญัติสำหรับนี้คือระยะทาง Levenshtein ซึ่งใช้เวลาสองสายและส่งกลับจำนวนที่แสดงถึงจำนวนขั้นต่ำของการแทรกการลบและการแทนที่ที่ต้องการในการแปลสตริงหนึ่ง ๆ ลงในอีก ฟังก์ชั่นสายอื่น ๆ ก็ยอมรับได้ (ตัวอย่างเช่นตัวเดียวที่นำแนวคิด transpositions มาใช้ในการปฏิบัติงานของอะตอม) ตราบเท่าที่พวกเขามีคุณสมบัติตรงตามเกณฑ์ที่กำหนดไว้ด้านล่าง ตอนนี้เราสามารถให้ข้อสังเกตที่เป็นประโยชน์อย่างยิ่งเกี่ยวกับระยะทาง Levenshtein สร้างเป็น ใส่เพียงแค่เมตริกพื้นที่คือความสัมพันธ์ใด ๆ ที่เป็นไปตามเกณฑ์ขั้นพื้นฐานสามอย่าง: d (x, y) = 0  x = y (ถ้าระยะห่างระหว่าง x และ y เท่ากับ 0 แล้ว x = y) d (x, y) = d (y, x) (ระยะทางจาก x เป็น y เท่ากับระยะทางจาก y ถึง x) d (x, y) + d (y, z) = d (x, z) ข้อสุดท้ายของเกณฑ์เหล่านี้เรียกว่า Triangle Inealality ความไม่เท่ากันของสามเหลี่ยมกล่าวว่าเส้นทางจาก x ถึง z ต้องไม่ยาวกว่าเส้นทางใด ๆ ที่ผ่านจุดกึ่งกลางอื่น (เส้นทางจาก x ไป y ถึง z) มองไปที่รูปสามเหลี่ยมตัวอย่างเช่นคุณไม่สามารถวาดรูปสามเหลี่ยมเพื่อให้ได้รับจากจุดหนึ่งไปอีกมุมหนึ่งโดยไปตามสองด้านมากกว่าที่จะไปตามด้านอื่น ๆ เกณฑ์ทั้งสามประการพื้นฐานตามที่พวกเขาเป็นทั้งหมดที่จำเป็นสำหรับบางอย่างเช่นระยะทาง Levenshtein เพื่อให้มีคุณสมบัติเป็น โปรดสังเกตว่านี่เป็นเรื่องที่กว้างกว่าเช่น Euclidian Space - Euclidian Space เป็นเมตริก แต่ Metric Spaces (เช่น Levenshtein Distance) ไม่ใช่ Euclidian ตอนนี้เรารู้ว่า Levenshtein Distance (และฟังก์ชันทางสายอื่น ๆ ที่คล้ายคลึงกัน) แสดงถึง Metric Space เรามาสังเกตการณ์ Burkhard และ Keller ที่สำคัญการสร้างต้นไม้บีเค การสร้างต้นไม้บีเค. ต้นไม้บีเคนี้ทำงานในกรณีของจำนวนน้อยคำเนื่องจาก O (n) แต่ถ้าต้องการสแกนพจนานุกรมเต็มรูปแบบสำหรับการจับคู่ที่ใกล้เคียงที่สุด O (n) ไม่ดีที่สุด นี่คือที่มาของ ต้นไม้บีเค การสร้างต้นไม้บีเค ทั้งหมดที่คุณต้องทำคือ ใช้คำใด ๆ จากชุดของคุณและวางไว้ในโหนดรากของคุณแล้วเพิ่มคำลงในต้นไม้ตามระยะทางของราก ตัวอย่างเช่น ถ้าเริ่มต้นต้นไม้ด้วยชุดคำ [book, books, cake] แล้วต้นไม้จะมีลักษณะเช่นนี้ถ้าฉันเริ่มต้นโดยการทำคำว่า หนังสือเป็นโหนดรากขั้นตอนการสร้างต้นไม้บีเค ขั้นตอนการสร้างต้นไม้บีเค. 1) LevenshteinDistance (caqe, book) -> 4    a) ตรวจสอบ (4  1    ก. ตรวจสอบ (1  1    a) (1  2    a) ตรวจสอบ (2 