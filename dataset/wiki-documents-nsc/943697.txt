<doc id="943697" url="https://th.wikipedia.org/wiki?curid=943697" title="การคูณลูกโซ่ของเมทริกซ์">การคูณลูกโซ่ของเมทริกซ์ Matrix-Chain Multiplication หรือ การคูณเมตริกซ์ ใช้สำหรับการแก้ปัญหาการคูณ matrix ซึ่งการคูณปกติอาจจะมีจำนวนครั้งมากเกินไปหรือมีประสิทธิภาพที่ไม่ดีพอซึ่งการใช้ algorithm นี้เป็นการคูณ matrix อย่างต่อเนื่องเพื่อหารูปแบบการคูณที่ดีที่สุดโดยใช้คุณสมบัติการเปลี่ยนหมวดหมู่การคูณของ matrix ตัวอย่าง matrix X มีขนาด 10 x 3 matrix Y มีขนาด 3 x 5 matrix Z มีขนาด 5 x 6 จำนวนครั้งของการคูณแบบ (X * Y) * Z คือ (10*3*5 + 10*5*6) = 450 ครั้ง ส่วนจำนวนครั้งของการคูณแบบ X * (Y * Z) คือ (3*5*6 + 10*3*6) = 270 ครั้ง จะเห็นได้ว่าการเปลี่ยนหมวดหมู่การคูณช่วยเพิ่มประสิทธิภาพหรือลดจำนวนครั้งการคูณลงได้ เราจึงต้องหารูปแบบของหมวดหมู่ที่ดีที่สุดโดยใช้ Matrix-Chain-Multiplication ทำการคูณ   ถ้าเราต้องการคูณแมทริกซ์จำนวน n ตัว AA…A ต้องการหาลำดับการคูณแมทริกซ์ ที่ใช้จำนวนครั้งของการคูณน้อยที่สุด เช่น n = 3 ต้องการคูณ AAA เมื่อ A, A, A มีขนาด10x100, 100x5,  และ 5x50 ตามลำดับ   (AA)A) ต้องใช้จำนวนครั้งของการคูณ = 10*100*5 เพื่อคำนวณ (AA)+ 10*5*50 เพื่อคำนวณ ((AA)A)=7,500 ครั้ง + 10*100*50 เพื่อคำนวณ (A(AA)) = 75,000 ครั้ง จะเห็นได้ว่า ((AA)A) ใช้จำนวนครั้งของการคูณน้อยกว่า (A(AA))ถึงสิบเท่า import sys1. Matrix Ai has dimension p[i-1] x p[i] for i = 1..n def MatrixChainOrder(p, n):1. Driver program to test above function arr = [1, 2, 3 ,4] size = len(arr) print(&quot;Minimum number of multiplications is &quot; +1. best case = O(n^3) 2. worst case = O(n^3) Matix Chain MultiplicationDynamic Programming | Set 8 (Matrix Chain Multiplication)</doc>
