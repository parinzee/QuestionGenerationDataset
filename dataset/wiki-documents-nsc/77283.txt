<doc id="77283" url="https://th.wikipedia.org/wiki?curid=77283" title="อินเทอร์พรีเตอร์แพตเทิร์น">อินเทอร์พรีเตอร์แพตเทิร์น อินเทอร์พรีเตอร์แพตเทิร์น (Interpreter pattern) เป็นดีไซน์แพตเทิร์น ที่ใช้ในกรณีที่ขอบเขตของปัญหาสามารถถูกอธิบายในลักษณะที่เป็นภาษาและกฎที่แน่นอนตายตัว เราสามารถสร้างคลาสที่เป็นตัวแทนขององค์ประกอบของภาษา จัดเรียงเข้าด้วยกันเพื่ออธิบายปัญหาหนึ่งๆ และแปลหรือประเมินผลโดยใช้โครงสร้างที่ได้จัดเรียงไว้นั้น ตัวอย่างเช่นสูตรคณิตศาสตร์ต่างๆ หรือยกตัวอย่างให้เฉพาะเจาะจงเช่น สูตรเรขาคณิตสำหรับหาพื้นที่รูปสามเหลี่ยม พื้นที่รูปสามเหลี่ยม = 1/2 * ความยาวฐาน * ความสูงการนำไปใช้งาน การนำไปใช้งาน. จากการที่ปัญหาส่วนใหญ่เมื่อถูกอธิบายในแบบที่เป็นนิยามภาษาจะมีลักษณะที่เป็น recursive คือปัญหาใหญ่ๆ จะถูกแก้ได้โดยการแบ่งแยกเป็นปัญหาย่อยๆ และแก้ปัญหาย่อยๆ ลงไปตามลำดับๆ จนในที่สุดถึงปัญหาที่ไม่จำเป็นต้องแบ่งย่อยอีก ทำให้องค์ประกอบของอินเทอร์พรีเตอร์แพตเทิร์นมีลักษณะเดียวกับคอมโพสิตแพตเทิร์น องค์ประกอบของอินเทอร์พรีเตอร์แพตเทิร์นมีดังนี้- อินเตอร์เฟสหรือคลาสแบบแอ็บสแตรคเป็นแม่แบบที่นิยามพฤติกรรมที่แต่ละอ็อบเจกต์ของอินเทอร์พรีเตอร์ต้องมี - คลาสที่สามารถมีองค์ประกอบอื่นของอินเทอร์พรีเตอร์ได้ - คลาสที่เป็นส่วนปลาย ไม่สามารถมีองค์ประกอบอื่นได้ - คลาสสำหรับเป็นบริบท (context) หรือองค์ประกอบที่ใช้ในการประเมินผลตัวอย่างโปรแกรมภาษาจาวา ตัวอย่างโปรแกรม. ภาษาจาวา. ตัวอย่างโปรแกรมเพื่อคำนวณหาพื้นที่รูปสามเหลี่ยมโดยสูตร พื้นที่รูปสามเหลี่ยม = 1/2 * ความยาวฐาน * ความสูง อินเตอร์เฟส codice_1 เป็นแม่แบบของส่วนประกอบต่างๆ ของคอมโพสิต นิยามเมธอด codice_2 เพื่อให้แต่ละองค์ประกอบประเมินผลในส่วนของตัวเองและองค์ประกอบย่อยที่อยู่ภายใต้ ในที่นี้เราใช้ codice_3 เป็น context เพื่อส่งผ่านค่าคัวแปรไปให้คลาสชนิด codice_4 ใช้ในการประเมินผล คลาส codice_5 เปรียบเสมือนเครื่องหมายคูณ สามารถมีองค์ประกอบย่อยได้สองตัวคือตัวคูณข้างซ้ายและตัวคูณข้างขวา คลาส codice_6 เปรียบเสมือนเครื่องหมายหาร สามารถมีองค์ประกอบย่อยได้สองตัวคือตัวถูกหารและตัวหาร คลาส codice_7 เปรียบเสมือนค่าคงที่ในสมการ ไม่มีองค์ประกอบย่อย คลาส codice_4 เปรียบเสมือนตัวแปรในสมการ มีหน้าที่หาค่าของตนเองจาก context ไม่มีองค์ประกอบย่อย การเรียกใช้งาน</doc>
